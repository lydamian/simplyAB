{"ast":null,"code":"var _jsxFileName = \"/Users/damianly/Desktop/Projects/ab_testing_framework/frontend/src/components/PrivateRoute.jsx\",\n    _s = $RefreshSig$();\n\n/* eslint-disable react/prop-types */\n\n/* eslint-disable react/jsx-props-no-spreading */\nimport React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport { isLoggedIn, getStatus } from 'features/auth/authSlice';\nimport { useSelector } from 'react-redux';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction PrivateRoute({\n  children,\n  ...rest\n}) {\n  _s();\n\n  // @TODO: remove statement below once you want authentication\n  return /*#__PURE__*/_jsxDEV(Route, {\n    children: /*#__PURE__*/_jsxDEV(Redirect, {\n      to: {\n        pathname: '/login',\n        state: {\n          from: location\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 10\n  }, this);\n  const isUserLoggedIn = useSelector(isLoggedIn);\n  const status = useSelector(getStatus);\n  return /*#__PURE__*/_jsxDEV(Route, { ...rest,\n    render: ({\n      location\n    }) => isUserLoggedIn && status === 'idle' ? children : /*#__PURE__*/_jsxDEV(Redirect, {\n      to: {\n        pathname: '/login',\n        state: {\n          from: location\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 11\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 5\n  }, this);\n}\n\n_s(PrivateRoute, \"FwHSCtmixt9TBV+DowQqg5hHeKM=\", false, function () {\n  return [useSelector, useSelector];\n});\n\n_c = PrivateRoute;\nexport default PrivateRoute;\n\nvar _c;\n\n$RefreshReg$(_c, \"PrivateRoute\");","map":{"version":3,"sources":["/Users/damianly/Desktop/Projects/ab_testing_framework/frontend/src/components/PrivateRoute.jsx"],"names":["React","Route","Redirect","isLoggedIn","getStatus","useSelector","PrivateRoute","children","rest","pathname","state","from","location","isUserLoggedIn","status"],"mappings":";;;AAAA;;AACA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,EAAgBC,QAAhB,QAAgC,kBAAhC;AACA,SAASC,UAAT,EAAqBC,SAArB,QAAsC,yBAAtC;AACA,SAASC,WAAT,QAA4B,aAA5B;;;AAEA,SAASC,YAAT,CAAsB;AAAEC,EAAAA,QAAF;AAAY,KAAGC;AAAf,CAAtB,EAA6C;AAAA;;AAC3C;AACA,sBAAO,QAAC,KAAD;AAAA,2BAAO,QAAC,QAAD;AAAU,MAAA,EAAE,EAAE;AAAEC,QAAAA,QAAQ,EAAE,QAAZ;AAAsBC,QAAAA,KAAK,EAAE;AAAEC,UAAAA,IAAI,EAAEC;AAAR;AAA7B;AAAd;AAAA;AAAA;AAAA;AAAA;AAAP;AAAA;AAAA;AAAA;AAAA,UAAP;AACA,QAAMC,cAAc,GAAGR,WAAW,CAACF,UAAD,CAAlC;AACA,QAAMW,MAAM,GAAGT,WAAW,CAACD,SAAD,CAA1B;AACA,sBACE,QAAC,KAAD,OACMI,IADN;AAEE,IAAA,MAAM,EAAE,CAAC;AAAEI,MAAAA;AAAF,KAAD,KAAmBC,cAAc,IAAIC,MAAM,KAAK,MAA7B,GACvBP,QADuB,gBAEvB,QAAC,QAAD;AAAU,MAAA,EAAE,EAAE;AAAEE,QAAAA,QAAQ,EAAE,QAAZ;AAAsBC,QAAAA,KAAK,EAAE;AAAEC,UAAAA,IAAI,EAAEC;AAAR;AAA7B;AAAd;AAAA;AAAA;AAAA;AAAA;AAJN;AAAA;AAAA;AAAA;AAAA,UADF;AAQD;;GAbQN,Y;UAGgBD,W,EACRA,W;;;KAJRC,Y;AAeT,eAAeA,YAAf","sourcesContent":["/* eslint-disable react/prop-types */\n/* eslint-disable react/jsx-props-no-spreading */\nimport React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport { isLoggedIn, getStatus } from 'features/auth/authSlice';\nimport { useSelector } from 'react-redux';\n\nfunction PrivateRoute({ children, ...rest }) {\n  // @TODO: remove statement below once you want authentication\n  return <Route><Redirect to={{ pathname: '/login', state: { from: location } }} /></Route>;\n  const isUserLoggedIn = useSelector(isLoggedIn);\n  const status = useSelector(getStatus);\n  return (\n    <Route\n      {...rest}\n      render={({ location }) => (isUserLoggedIn && status === 'idle'\n        ? children\n        : <Redirect to={{ pathname: '/login', state: { from: location } }} />)}\n    />\n  );\n}\n\nexport default PrivateRoute;\n"]},"metadata":{},"sourceType":"module"}
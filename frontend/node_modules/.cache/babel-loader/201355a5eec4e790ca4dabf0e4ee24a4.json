{"ast":null,"code":"/* eslint-disable import/no-cycle */\n\n/* eslint-disable no-undef */\n\n/* eslint-disable no-unused-vars */\n\n/* eslint-disable no-param-reassign */\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport authService from 'services/auth';\nimport { addAlert } from 'features/alerts/alertsSlice';\nconst initialState = {\n  status: 'idle',\n  isAuthenticated: false,\n  user: {\n    username: null\n  }\n}; // Thunk functions\n\nconst login = createAsyncThunk('auth/login', async ({\n  username,\n  password,\n  twoFactorAuthToken\n}) => {\n  const {\n    success,\n    token,\n    username: userName\n  } = await authService.getAuthToken(username, password, twoFactorAuthToken);\n\n  if (success === false) {\n    store.dispatch(addAlert({\n      message: 'Unsuccesfully logged in user',\n      type: 'DANGER'\n    }));\n  }\n\n  if (success === true) {\n    localStorage.setItem('X-Raya-Token', token);\n    store.dispatch(addAlert({\n      message: 'Succesfully logged in user',\n      type: 'SUCCESS'\n    }));\n  }\n\n  return {\n    isAuthenticated: success,\n    username: userName\n  };\n});\nconst authSlice = createSlice({\n  name: 'auth',\n  initialState,\n  reducers: {\n    reset: {\n      prepare(payload) {\n        return {\n          payload\n        };\n      },\n\n      reducer(state) {\n        Object.assign(state, initialState);\n      }\n\n    },\n    logout: {\n      prepare(payload) {\n        return {\n          payload\n        };\n      },\n\n      reducer(state) {\n        Object.assign(state, initialState);\n        localStorage.removeItem('X-Raya-Token');\n      }\n\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(login.pending, state => {\n      state.status = 'loading';\n    }).addCase(login.fulfilled, (state, action) => {\n      const {\n        isAuthenticated,\n        username\n      } = action.payload;\n      state.isAuthenticated = isAuthenticated;\n      state.user.username = username;\n      state.status = 'idle';\n    });\n  }\n});\n\nconst isLoggedIn = state => state.auth.isAuthenticated;\n\nconst getStatus = state => state.auth.status;\n\nconst getAuthToken = () => {\n  const authToken = localStorage.get('X-Raya-Token');\n\n  if (authToken != null) {\n    return true;\n  }\n\n  return false;\n};\n\nexport { isLoggedIn, getStatus, getAuthToken, login }; // Action creators are generated for each case reducer function\n\nexport const {\n  reset,\n  logout\n} = authSlice.actions;\nexport default authSlice.reducer;","map":{"version":3,"sources":["/Users/damianly/Desktop/Raya/Raya-React-DGDash/react-dg-dash/src/features/auth/authSlice.ts"],"names":["createSlice","createAsyncThunk","authService","addAlert","initialState","status","isAuthenticated","user","username","login","password","twoFactorAuthToken","success","token","userName","getAuthToken","store","dispatch","message","type","localStorage","setItem","authSlice","name","reducers","reset","prepare","payload","reducer","state","Object","assign","logout","removeItem","extraReducers","builder","addCase","pending","fulfilled","action","isLoggedIn","auth","getStatus","authToken","get","actions"],"mappings":"AAAA;;AACA;;AACA;;AACA;AACA,SACEA,WADF,EAEEC,gBAFF,QAGO,kBAHP;AAIA,OAAOC,WAAP,MAAwB,eAAxB;AACA,SAASC,QAAT,QAAyB,6BAAzB;AAGA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,MAAM,EAAE,MADW;AAEnBC,EAAAA,eAAe,EAAE,KAFE;AAGnBC,EAAAA,IAAI,EAAE;AACJC,IAAAA,QAAQ,EAAE;AADN;AAHa,CAArB,C,CAQA;;AACA,MAAMC,KAAK,GAAGR,gBAAgB,CAAC,YAAD,EAC5B,OAAO;AACLO,EAAAA,QADK;AAELE,EAAAA,QAFK;AAGLC,EAAAA;AAHK,CAAP,KAQM;AACJ,QAAM;AACJC,IAAAA,OADI;AAEJC,IAAAA,KAFI;AAGJL,IAAAA,QAAQ,EAAEM;AAHN,MAIF,MAAMZ,WAAW,CAACa,YAAZ,CAAyBP,QAAzB,EAAmCE,QAAnC,EAA6CC,kBAA7C,CAJV;;AAMA,MAAIC,OAAO,KAAK,KAAhB,EAAuB;AACrBI,IAAAA,KAAK,CAACC,QAAN,CAAed,QAAQ,CAAC;AACtBe,MAAAA,OAAO,EAAE,8BADa;AAEtBC,MAAAA,IAAI,EAAE;AAFgB,KAAD,CAAvB;AAID;;AACD,MAAIP,OAAO,KAAK,IAAhB,EAAsB;AACpBQ,IAAAA,YAAY,CAACC,OAAb,CAAqB,cAArB,EAAqCR,KAArC;AACAG,IAAAA,KAAK,CAACC,QAAN,CAAed,QAAQ,CAAC;AACtBe,MAAAA,OAAO,EAAE,4BADa;AAEtBC,MAAAA,IAAI,EAAE;AAFgB,KAAD,CAAvB;AAID;;AAED,SAAO;AACLb,IAAAA,eAAe,EAAEM,OADZ;AAELJ,IAAAA,QAAQ,EAAEM;AAFL,GAAP;AAID,CAlC2B,CAA9B;AAoCA,MAAMQ,SAAS,GAAGtB,WAAW,CAAC;AAC5BuB,EAAAA,IAAI,EAAE,MADsB;AAE5BnB,EAAAA,YAF4B;AAG5BoB,EAAAA,QAAQ,EAAE;AACRC,IAAAA,KAAK,EAAE;AACLC,MAAAA,OAAO,CAACC,OAAD,EAAe;AAAE,eAAO;AAAEA,UAAAA;AAAF,SAAP;AAAqB,OADxC;;AAELC,MAAAA,OAAO,CAACC,KAAD,EAAQ;AACbC,QAAAA,MAAM,CAACC,MAAP,CAAcF,KAAd,EAAqBzB,YAArB;AACD;;AAJI,KADC;AAOR4B,IAAAA,MAAM,EAAE;AACNN,MAAAA,OAAO,CAACC,OAAD,EAAe;AAAE,eAAO;AAAEA,UAAAA;AAAF,SAAP;AAAqB,OADvC;;AAENC,MAAAA,OAAO,CAACC,KAAD,EAAQ;AACbC,QAAAA,MAAM,CAACC,MAAP,CAAcF,KAAd,EAAqBzB,YAArB;AACAgB,QAAAA,YAAY,CAACa,UAAb,CAAwB,cAAxB;AACD;;AALK;AAPA,GAHkB;AAkB5BC,EAAAA,aAAa,EAAGC,OAAD,IAAa;AAC1BA,IAAAA,OAAO,CACJC,OADH,CACW3B,KAAK,CAAC4B,OADjB,EAC2BR,KAAD,IAAW;AACjCA,MAAAA,KAAK,CAACxB,MAAN,GAAe,SAAf;AACD,KAHH,EAIG+B,OAJH,CAIW3B,KAAK,CAAC6B,SAJjB,EAI4B,CAACT,KAAD,EAAQU,MAAR,KAAmB;AAC3C,YAAM;AACJjC,QAAAA,eADI;AAEJE,QAAAA;AAFI,UAGF+B,MAAM,CAACZ,OAHX;AAKAE,MAAAA,KAAK,CAACvB,eAAN,GAAwBA,eAAxB;AACAuB,MAAAA,KAAK,CAACtB,IAAN,CAAWC,QAAX,GAAsBA,QAAtB;AACAqB,MAAAA,KAAK,CAACxB,MAAN,GAAe,MAAf;AACD,KAbH;AAcD;AAjC2B,CAAD,CAA7B;;AAoCA,MAAMmC,UAAU,GAAIX,KAAD,IAAsBA,KAAK,CAACY,IAAN,CAAWnC,eAApD;;AACA,MAAMoC,SAAS,GAAIb,KAAD,IAAsBA,KAAK,CAACY,IAAN,CAAWpC,MAAnD;;AAEA,MAAMU,YAAY,GAAG,MAAM;AACzB,QAAM4B,SAAS,GAAGvB,YAAY,CAACwB,GAAb,CAAiB,cAAjB,CAAlB;;AACA,MAAID,SAAS,IAAI,IAAjB,EAAuB;AACrB,WAAO,IAAP;AACD;;AACD,SAAO,KAAP;AACD,CAND;;AAQA,SACEH,UADF,EAEEE,SAFF,EAGE3B,YAHF,EAIEN,KAJF,G,CAOA;;AACA,OAAO,MAAM;AACXgB,EAAAA,KADW;AAEXO,EAAAA;AAFW,IAGTV,SAAS,CAACuB,OAHP;AAKP,eAAevB,SAAS,CAACM,OAAzB","sourcesContent":["/* eslint-disable import/no-cycle */\n/* eslint-disable no-undef */\n/* eslint-disable no-unused-vars */\n/* eslint-disable no-param-reassign */\nimport {\n  createSlice,\n  createAsyncThunk,\n} from '@reduxjs/toolkit';\nimport authService from 'services/auth';\nimport { addAlert } from 'features/alerts/alertsSlice';\nimport type { RootState} from 'state/store';\n\nconst initialState = {\n  status: 'idle',\n  isAuthenticated: false,\n  user: {\n    username: null,\n  },\n};\n\n// Thunk functions\nconst login = createAsyncThunk('auth/login',\n  async ({\n    username,\n    password,\n    twoFactorAuthToken,\n  }: {\n    username: string,\n    password: string,\n    twoFactorAuthToken: string\n  }) => {\n    const {\n      success,\n      token,\n      username: userName,\n    } = await authService.getAuthToken(username, password, twoFactorAuthToken);\n\n    if (success === false) {\n      store.dispatch(addAlert({\n        message: 'Unsuccesfully logged in user',\n        type: 'DANGER',\n      }));\n    }\n    if (success === true) {\n      localStorage.setItem('X-Raya-Token', token);\n      store.dispatch(addAlert({\n        message: 'Succesfully logged in user',\n        type: 'SUCCESS',\n      }));\n    }\n\n    return {\n      isAuthenticated: success,\n      username: userName,\n    };\n  });\n\nconst authSlice = createSlice({\n  name: 'auth',\n  initialState,\n  reducers: {\n    reset: {\n      prepare(payload: any) { return { payload }; },\n      reducer(state) {\n        Object.assign(state, initialState);\n      },\n    },\n    logout: {\n      prepare(payload: any) { return { payload }; },\n      reducer(state) {\n        Object.assign(state, initialState);\n        localStorage.removeItem('X-Raya-Token');\n      },\n    },\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(login.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(login.fulfilled, (state, action) => {\n        const {\n          isAuthenticated,\n          username,\n        } = action.payload;\n\n        state.isAuthenticated = isAuthenticated;\n        state.user.username = username;\n        state.status = 'idle';\n      });\n  },\n});\n\nconst isLoggedIn = (state: RootState) => state.auth.isAuthenticated;\nconst getStatus = (state: RootState) => state.auth.status;\n\nconst getAuthToken = () => {\n  const authToken = localStorage.get('X-Raya-Token');\n  if (authToken != null) {\n    return true;\n  }\n  return false;\n};\n\nexport {\n  isLoggedIn,\n  getStatus,\n  getAuthToken,\n  login,\n};\n\n// Action creators are generated for each case reducer function\nexport const {\n  reset,\n  logout,\n} = authSlice.actions;\n\nexport default authSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}